name: Semantic Versioning

inputs:
  main_branch:
    description: The main branch of the project - e.g. main or develop
    required: true
    default: main

outputs:
  current_version:
    description: Current latest version
    value: ${{ steps.semantic_versioning.outputs.current_version }}
  new_version:
    description: Next determined version
    value: ${{ steps.semantic_versioning.outputs.new_version }}
  version_type:
    description: Version increment type
    value: ${{ steps.semantic_versioning.outputs.version_type }}
  branch_name:
    description: Branch name
    value: ${{ steps.semantic_versioning.outputs.branch_name }}
  commit_tag:
    description: Current working commit tag
    value: ${{ steps.semantic_versioning.outputs.commit_tag }}

runs:
  using: composite

  steps:
    - name: Determine current latest version
      id: current_version
      shell: bash
      run: |
        # Check for latest version, if one does not exist set current fallback version.
        CURRENT_VERSION=$(git tag --sort=-v:refname --list 'v[0-9]*\.[0-9]*\.[0-9]*' | head -n 1)
        if [[ -z "$CURRENT_VERSION" ]]; then
          CURRENT_VERSION="v0.0.0" && echo "Current version not found, defaulting to: $CURRENT_VERSION"
        fi
        echo "Current version determined as: ${CURRENT_VERSION}"

        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT        

    - name: Determine version increment type
      id: versioning
      shell: bash
      run: |
        # Check if running on main branch after PR merge, set branch name to source branch.
        if [[ "${{ github.ref_name }}" == "${{ inputs.main_branch }}" ]]; then
          MERGE_COMMIT_MESSAGE=$(git log --format=%B -n 1 "${GITHUB_SHA}")
          BRANCH_NAME=$(echo "$MERGE_COMMIT_MESSAGE" | grep -oP '(?<=from ).*' | awk -F/ '{print $(NF-1)"/"$NF}')
          echo "Branch Name: $BRANCH_NAME"
        else
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
        fi

        # Check value of ${BRANCH_NAME} (case insensitive) to determine version increment type.
        case "${BRANCH_NAME,,}" in
          hotfix/* | bugfix/* | bug/*)
            VERSION_TYPE="patch" && echo "Determined next version increment type as: $VERSION_TYPE"
            ;;
          feature/* | minor/*)
            VERSION_TYPE="minor" && echo "Determined next version increment type as: $VERSION_TYPE"
            ;;
          major/* | release/*)
            VERSION_TYPE="major" && echo "Determined next version increment type as: $VERSION_TYPE"
            ;;
          *)
            VERSION_TYPE="patch" && echo "*!* Next version increment type not determined, defaulting to: $VERSION_TYPE" \
                    && echo "*!* Please merge from a branch with prefix <bug/, bugfix/, hotfix/, feature/, minor/, release/, or major/>"
            ;;
        esac

        echo "VERSION_TYPE=${VERSION_TYPE}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
        echo "VERSION_TYPE=${VERSION_TYPE}" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT        

    - name: Determine new version
      id: new_version
      shell: bash
      run: |
        # Calculate new version based on the result of ${VERSION_TYPE}.
        IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_VERSION//v/}"
        case ${VERSION_TYPE} in
          major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
          minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
          patch) PATCH=$((PATCH + 1)) ;;
        esac
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

        # Check if new version already exists, increment patch version as fallback.
        if git rev-parse --quiet --verify "${NEW_VERSION}" >/dev/null; then
          echo "*!* New version already exists. Incrementing patch version as fallback."
          ((PATCH++))
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        fi
        echo "NEW_VERSION determined as: ${NEW_VERSION}"

        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT        

    - name: Print current working commit version
      if: ${{ github.ref }} != 'refs/heads/${{ inputs.main_branch }}'
      shell: bash
      run: |
        # Create version from recent commit to be used elsewhere if needed.
        SHORT_SHA=$(git rev-parse --short HEAD)
        COMMIT_TAG="${CURRENT_VERSION}-${SHORT_SHA}"
        echo "Current working commit version: $COMMIT_TAG"

        echo "COMMIT_TAG=${COMMIT_TAG}" >> $GITHUB_ENV
        echo "COMMIT_TAG=${COMMIT_TAG}" >> $GITHUB_OUTPUT        

    - name: Finalize and publish new release tag
      if: github.ref_name == inputs.main_branch
      shell: bash
      run: |
        # If running on main branch, bump latest tag for new release.
        if [[ "${{ github.ref_name }}" != "${{ inputs.main_branch }}" ]]; then
          echo "Not running on ${{ inputs.main_branch }}. Skipping release."
          exit 0
        fi

        echo "Bumping tag on ${{ inputs.main_branch }} to ${NEW_VERSION}"
        git tag ${NEW_VERSION}
        git push origin ${NEW_VERSION}
        git tag -f latest ${NEW_VERSION}
        git push origin -f latest